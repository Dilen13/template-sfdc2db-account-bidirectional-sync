<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
      xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
      version="EE-3.5.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">
    <data-mapper:config name="Account_To_Account" transformationGraphPath="account_to_account.grf" doc:name="Account_To_Account"/>
    <data-mapper:config name="Account_To_Account_1" transformationGraphPath="account_to_account_1.grf" doc:name="Account_To_Account_1"/>
    <data-mapper:config name="Account_To_Account_1Account_To_Account_2" transformationGraphPath="account_to_account_2.grf" doc:name="Account_To_Account_1Account_To_Account_2"/>

	<batch:job name="syncAccountsBatch" max-failed-records="5">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:process-records>

			<batch:step name="getAccountInDatabaseStep" accept-expression="'Salesforce'.equals(flowVars['sourceSystem'])">
				<enricher
					source="#[payload.isEmpty() ? NullPayload.getInstance() : payload[0]]"
					target="#[recordVars['accountInTargetInstance']]" doc:name="store result in record var 'accountInTargetInstance'">
                    <db:select config-ref="GenericDatabaseConnector" doc:name="query account">
                        <db:parameterized-query><![CDATA[SELECT * FROM Account WHERE Name = #[payload['Name']]]]></db:parameterized-query>
                    </db:select>
				</enricher>
			</batch:step>

			<batch:step name="updateAccountInDatabaseStep" accept-expression="'Salesforce'.equals(flowVars['sourceSystem']) ? (!(recordVars['accountInTargetInstance'] is NullPayload) &amp;&amp; org.mule.templates.util.DateUtils.stringToDateTime(payload['LastModifiedDate'], '${sfdc.date.format}').isAfter(org.mule.templates.util.DateUtils.dateToDateTimeUsingProvidedOffset(recordVars['accountInTargetInstance']['LastModifiedDate'], '${database.date.offset}')) &amp;&amp; '${sfdc.integration.user.id}' != payload.get('LastModifiedById')) : false">
                <expression-component doc:name="prepare account for update"><![CDATA[payload.remove('LastModifiedById');
payload.remove('LastModifiedDate');]]></expression-component>
                <data-mapper:transform config-ref="Account_To_Account" doc:name="transform Salesforce account to Database account"/>
				<batch:commit size="200" doc:name="Batch Commit">
					<db:update config-ref="GenericDatabaseConnector" bulkMode="true"
						doc:name="update accounts">
                        <db:parameterized-query><![CDATA[UPDATE Account SET
AccountNumber = #[payload['AccountNumber']], 
Description = #[payload['Description']],  
NumberOfEmployees = #[payload['NumberOfEmployees']], 
Phone = #[payload['Phone']], 
Type = #[payload['Type']],	
LastModifiedDate = CURRENT_TIMESTAMP
WHERE Name = #[payload['Name']]]]></db:parameterized-query>


					</db:update>
					<logger message="Update Database response: #[payload]"
						level="INFO" doc:name="log response" />
				</batch:commit>
			</batch:step>
			<batch:step name="insertAccountsInDatabaseStep" accept-expression="'Salesforce'.equals(flowVars['sourceSystem']) ? (recordVars['accountInTargetInstance'] is NullPayload) &amp;&amp; '${sfdc.integration.user.id}' != payload.get('LastModifiedById')) : false">
                <expression-component doc:name="prepare account for insert"><![CDATA[payload.remove('LastModifiedById');
payload.remove('LastModifiedDate');
]]></expression-component>
                <data-mapper:transform config-ref="Account_To_Account_1Account_To_Account_2" doc:name="transform Salesforce account to database account"/>
				<batch:commit size="200" doc:name="Batch Commit">
					<db:insert config-ref="GenericDatabaseConnector" bulkMode="true"
						doc:name="insert accounts">
                        <db:parameterized-query><![CDATA[INSERT INTO Account (
	AccountNumber,
	Description,
	Name,
	NumberOfEmployees,
	Phone,
	Type,
	SalesforceId,
	LastModifiedById,
	LastModifiedDate
) VALUES (
	#[payload['AccountNumber']],
	#[payload['Description']],
	#[payload['Name']],
	#[payload['NumberOfEmployees']],
	#[payload['Phone']],
	#[payload['Type']],
	#[payload['Id']],
	CURRENT_USER,
	CURRENT_TIMESTAMP
)]]></db:parameterized-query>


					</db:insert>
					<logger message="Insert Database response: #[payload]"	level="INFO" doc:name="log response" />
				</batch:commit>
			</batch:step>
			<batch:step name="getAccountInSalesforceStep" accept-expression="'Database'.equals(flowVars['sourceSystem'])">
				<enricher source="#[payload]" target="#[recordVars['accountInTargetInstance']]" doc:name="store result in record var 'accountInTargetInstance'">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id, Name, LastModifiedById, LastModifiedDate, NumberOfEmployees FROM Account WHERE (Name = '#[payload['Name']]')" doc:name="query account"/>
				</enricher>
			</batch:step>

			<batch:step name="upsertAccountInSalesforceStep" accept-expression="'Database'.equals(flowVars['sourceSystem']) ? (recordVars['accountInTargetInstance'] is NullPayload ? true : org.mule.templates.util.DateUtils.dateToDateTimeUsingProvidedOffset(payload['LastModifiedDate'], '${database.date.offset}').isAfter(org.mule.templates.util.DateUtils.stringToDateTime(recordVars['accountInTargetInstance']['LastModifiedDate'], '${sfdc.date.format}')) &amp;&amp; '${db.integration.user.id}' != payload.get('LastModifiedById')) : false">
                <data-mapper:transform config-ref="Account_To_Account_1" doc:name="transform Database account to Salesforce account"/>
				<expression-component doc:name="prepare account for upsert"><![CDATA[if(!(payload['NumberOfEmployees'] == null)) {
	payload.put('NumberOfEmployees', Integer.parseInt(payload['NumberOfEmployees']));
}

if(!(recordVars['accountInTargetInstance'] is NullPayload)) {
	payload.put('Id', recordVars['accountInTargetInstance']['Id']);
}

payload.remove('LastModifiedById');
payload.remove('LastModifiedDate');
payload.remove('SalesforceId');
]]></expression-component>
				<batch:commit size="200" doc:name="Batch Commit">
					<sfdc:upsert config-ref="Salesforce"
						externalIdFieldName="Id" type="Account" doc:name="upsert account">
						<sfdc:objects ref="#[payload]" />
					</sfdc:upsert>
					<logger message="Upsert Salesforce A response: #[payload]"
						level="ERROR" doc:name="log response" />
				</batch:commit>
			</batch:step>

		</batch:process-records>
	</batch:job>

</mule>
